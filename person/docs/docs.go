// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "RigelLab",
            "url": "https://t.me/rigellab"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/persons": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Поиск пользователей",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Поиск по имени, адресу, работе",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователи",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.ArrayResult"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.PersonData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Создание пользователя",
                "parameters": [
                    {
                        "description": "Данные о пользователе",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PersonRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пользователь создан"
                    },
                    "400": {
                        "description": "Ошибка в теле запроса"
                    }
                }
            }
        },
        "/persons/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Пользователь",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь",
                        "schema": {
                            "$ref": "#/definitions/model.PersonData"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    }
                }
            },
            "delete": {
                "tags": [
                    "persons"
                ],
                "summary": "Удаление пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Пользователь удалён"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Обновление пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные о пользователе",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PersonRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Пользователь обновлён"
                    },
                    "400": {
                        "description": "Ошибка в теле запроса"
                    },
                    "404": {
                        "description": "Пользователь не найден"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ArrayResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "pages": {
                    "type": "integer"
                }
            }
        },
        "model.PersonData": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "work": {
                    "type": "string"
                }
            }
        },
        "model.PersonRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "work": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "rsoi-awsy.onrender.com",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Persons API",
	Description:      "Апи для лабы 1",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
